<?xml version="1.0" encoding="UTF-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"><channel><title>gnupg | Library Online</title><link>https://lib.onl/ru/tags/gnupg/</link><description>Заметки на тему администрирования и разработки различных систем, приложений и серверов.</description><language>ru-RU</language><sy:updatePeriod>weekly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><managingEditor>mail@lib.onl (Library Online)</managingEditor><webMaster>mail@lib.onl (Library Online)</webMaster><copyright>CC BY-SA 4.0</copyright><image><link>https://lib.onl/ru/tags/gnupg/</link><url>https://lib.onl/img/icon-128.png</url><width>128</width><height>128</height><title>gnupg | Library Online</title><description>Заметки на тему администрирования и разработки различных систем, приложений и серверов.</description></image><lastBuildDate>Thu, 16 Jul 2020 06:55:17 +0000</lastBuildDate><atom:link href="https://lib.onl/ru/tags/gnupg/index.xml" rel="self" type="application/rss+xml"/><item><title>GnuPG: Создание и работа с ключами шифрования</title><link>https://lib.onl/ru/posts/2020/07/7a204545-daa8-58ce-ba35-75e732e1bcc0/</link><dc:creator>Kitsune Solar</dc:creator><guid isPermaLink="true">https://lib.onl/ru/posts/2020/07/7a204545-daa8-58ce-ba35-75e732e1bcc0/</guid><description>GnuPG (GPG) это программа для шифрования информации и создания электронных цифровых подписей. Она создавалась в качестве свободной альтернативе несвободному PGP.</description><content:encoded><![CDATA[<p><strong>GnuPG (GPG)</strong> это программа для шифрования информации и создания электронных цифровых подписей. Она создавалась в качестве свободной альтернативе несвободному <strong>PGP</strong>.</p>
<h2 id="создание-ключа">Создание ключа</h2>
<p>GPG предоставляет различные алгоритмы шифрования. Я предпочитаю алгоритм <strong>ECC</strong>, основанный на эллиптических кривых (Elliptic Curve Cryptography).</p>
<p>Для создания ключей шифрования, нужно чтобы в системе была установлена утилита GPG. Для систем <strong>Debian</strong> и <strong>CentOS / Fedora</strong> этим занимается пакет <code>gnupg</code>, устанавливается командами:</p>
<pre><code class="language-bash"># CentOS 8 / Fedora
dnf install gnupg

# Debian
apt install gnupg
</code></pre>
<p>После того, как пакет установлен, можно начать создание ключа командой:</p>
<pre><code class="language-bash">gpg --expert --full-gen-key
</code></pre>
<p>Команда вернёт следующий результат:</p>
<pre><code>gpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
   (7) DSA (set your own capabilities)
   (8) RSA (set your own capabilities)
   (9) ECC and ECC
  (10) ECC (sign only)
  (11) ECC (set your own capabilities)
  (13) Existing key
  (14) Existing key from card
Your selection?
</code></pre>
<p>Здесь спрашивается, какой конкретно ключ мы хотим получить. Вводим <code>9</code>. Получаем:</p>
<pre><code>Please select which elliptic curve you want:
   (1) Curve 25519
   (3) NIST P-256
   (4) NIST P-384
   (5) NIST P-521
   (9) secp256k1
Your selection?
</code></pre>
<p>А здесь уже предстоит выбрать алгоритм шифрования. Вводим <code>1</code>. Получаем:</p>
<pre><code>Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for? (0)
</code></pre>
<p>На последнем шаге настройки ключа спрашивается время действия ключа. Обычно, личные ключи генерируются с безлимитным временем действия. Вводим <code>0</code> (этот пункт идёт по умолчанию).</p>
<p>Дальше будет пара-тройка вопросов по поводу имени владельца ключа, его адреса e-mail и с просьбой указать комментарий. Таким образом, создаётся пара ключей: закрытый и открытый. Открытый ключ можно публиковать на различных ресурсах с целью идентификации владельца и подтверждения его личности. Например, так работает верификация коммитов на GitLab’е и GitHub’е. Закрытый ключ должен всегда оставаться внутри системы.</p>
<h2 id="список-ключей-в-системе">Список ключей в системе</h2>
<p>Посмотреть установленные в системе ключи можно командой:</p>
<pre><code class="language-bash">gpg --list-keys --keyid-format LONG --with-fingerprint
</code></pre>
<p>Здесь:</p>
<ul>
<li><code>--list-keys</code> - показать список ключей.</li>
<li><code>--keyid-format LONG</code> - формат отображения каждого ключа в расширенном (<code>LONG</code>) формате.</li>
<li><code>--with-fingerprint</code> - вывести отпечаток. Для себя всегда добавляю эту опцию на всякий случай.</li>
</ul>
<p>Команда вернёт следующий результат:</p>
<pre><code class="language-bash">pub   ed25519/JTM4BAVLPI8F0XHR 2020-02-17 [SC]                                # Key: ID.
      Key fingerprint = XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX    # Key: Fingerprint.
uid                 [ultimate] John Doe &lt;john.doe@example.com&gt;                # Key: INFO.
sub   cv25519/AI9NEDUOWRF016Y2 2020-02-17 [E]
</code></pre>
<p>Здесь:</p>
<ul>
<li><code>JTM4BAVLPI8F0XHR</code> - идентификатор ключа. Он потребуется для каких-либо действий с ключом (редактирование / удаление / и т.п.).</li>
<li><code>[ultimate]</code> - уровень доверия к ключу.</li>
<li><code>John Doe</code> - имя хозяина ключа.</li>
<li><code>&lt;john.doe@example.com&gt;</code> - почта хозяина ключа.</li>
<li><code>ed25519</code> &amp; <code>cv25519</code> - алгоритмы шифрования.</li>
</ul>
<h2 id="экспорт-и-импорт-ключа">Экспорт и импорт ключа</h2>
<p>При создании открытого и закрытого ключей, необходимо экспортировать их для того, чтобы они хранились где-то независимо от системы, например, на какой-нибудь карте памяти или USB-флешке. Следующие две команды выполняют необходимые действия:</p>
<pre><code class="language-bash"># Export: PUBLIC.
gpg --armor --output JohnDoe.public.asc --export JTM4BAVLPI8F0XHR

# Export: PRIVATE.
gpg --armor --output JohnDoe.private.asc --export-secret-keys JTM4BAVLPI8F0XHR
</code></pre>
<p>Здесь:</p>
<ul>
<li><code>--armor</code> - экспорт ключа в формате <strong>ASCII</strong> (текстовый формат).</li>
<li><code>--output</code> - имя файлы, в который будет экспортирован ключ.</li>
<li><code>--export JTM4BAVLPI8F0XHR</code> - экспорт открытого ключа с идентификатором <code>JTM4BAVLPI8F0XHR</code>.</li>
<li><code>--export-secret-keys JTM4BAVLPI8F0XHR</code> - экспорт закрытого ключа с идентификатором <code>JTM4BAVLPI8F0XHR</code>.</li>
</ul>
<p>С экспортом разобрались. Теперь по поводу импорта&hellip; Импортировать также необходимо открытый и закрытый ключи. Следующие две команды выполняют необходимые действия:</p>
<pre><code class="language-bash"># Import: PUBLIC.
gpg --import JohnDoe.public.asc

# Import: PRIVATE.
gpg --import JohnDoe.private.asc
</code></pre>
<p>После импорта ключ приобретает <strong>стандартный уровень доверия</strong>. Для повышения или понижения уровня доверия, ключ необходимо отредактировать.</p>
<h2 id="редактирование-ключа">Редактирование ключа</h2>
<p>Следующая команда позволяет отредактировать ключ:</p>
<pre><code>gpg --edit-key JTM4BAVLPI8F0XHR
</code></pre>
<p>Здесь:</p>
<ul>
<li><code>--edit-key JTM4BAVLPI8F0XHR</code> - редактирование ключа с идентификатором <code>JTM4BAVLPI8F0XHR</code>.</li>
</ul>
<p>Режим редактирования ключа представляет собой текстовый интерфейс, в который вручную вбиваются команды. Например, повысим уровень доверия к ключу до максимального (ultimate).</p>
<ol>
<li>Вводим <code>trust</code>.</li>
<li>Выбираем <code>5 (I trust ultimately)</code>.</li>
<li>Вводим <code>quit</code> (выход).</li>
</ol>]]></content:encoded><pubDate>Thu, 16 Jul 2020 06:55:17 +0000</pubDate><category>Крипто</category></item></channel></rss>