<?xml version="1.0" encoding="UTF-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"><channel><title>linux | Library Online</title><link>https://lib.onl/ru/tags/linux/</link><description>Заметки на тему администрирования и разработки различных систем, приложений и серверов.</description><language>ru-RU</language><sy:updatePeriod>weekly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><managingEditor>mail@lib.onl (Library Online)</managingEditor><webMaster>mail@lib.onl (Library Online)</webMaster><copyright>CC BY-SA 4.0</copyright><image><link>https://lib.onl/ru/tags/linux/</link><url>https://lib.onl/img/icon-128.png</url><width>128</width><height>128</height><title>linux | Library Online</title><description>Заметки на тему администрирования и разработки различных систем, приложений и серверов.</description></image><lastBuildDate>Sat, 14 Aug 2021 15:52:38 +0000</lastBuildDate><atom:link href="https://lib.onl/ru/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Настройка и использование Git</title><link>https://lib.onl/ru/posts/2021/08/c35f395f-5921-55eb-afcf-1ad812a1a9d9/</link><dc:creator>Kitsune Solar</dc:creator><guid isPermaLink="true">https://lib.onl/ru/posts/2021/08/c35f395f-5921-55eb-afcf-1ad812a1a9d9/</guid><description>В этой заметке я приведу параметры Git, которые сам использую при работе с репозиториями.</description><content:encoded><![CDATA[<p>В этой заметке я приведу параметры Git, которые сам использую при работе с репозиториями.</p>
<h2 id="первичная-настройка">Первичная настройка</h2>
<p>Для начала работы с Git&rsquo;ом, его необходимо хотя бы минимально настроить.</p>
<ol>
<li>Указать своё имя:</li>
</ol>
<pre><code>git config --global user.name &quot;John Doe&quot;
</code></pre>
<ol start="2">
<li>Указать свой адрес e-mail:</li>
</ol>
<pre><code>git config --global user.email &quot;johndoe@example.com&quot;
</code></pre>
<h2 id="настройка-подписи">Настройка подписи</h2>
<p>Хорошим тоном будет считаться подпись каждого своего коммита.</p>
<ol>
<li>Выяснить какие ключи установлены в системе (о создании ключей я публиковал заметку <span class="shortcode shortcode-uuid"><a href="/ru/posts/2020/07/7a204545-daa8-58ce-ba35-75e732e1bcc0/">GnuPG: Создание и работа с ключами шифрования</a></span>):</li>
</ol>
<pre><code>gpg --list-secret-keys --keyid-format=long
</code></pre>
<ol start="2">
<li>Указать Git&rsquo;у всегда подписывать каждый коммит:</li>
</ol>
<pre><code>git config --global commit.gpgsign true
</code></pre>
<ol start="3">
<li>Указать Git&rsquo;у идентификатор ключа для подписи коммита:</li>
</ol>
<pre><code>git config --global user.signingkey 3AA5C34371567BD2
</code></pre>
<h2 id="хранилище-паролей">Хранилище паролей</h2>
<p>Git по умолчанию не сохраняет регистрационные данные для репозиториев. Эта настройка позволяет указать Git&rsquo;у использовать для хранения регистрационных данных текстовый файл <code>~/.git-credentials</code>:</p>
<pre><code>git config --global credential.helper store
</code></pre>
<h2 id="отмена-изменений">Отмена изменений</h2>
<p>Отмена конкретного коммита:</p>
<pre><code>git revert [commit]
</code></pre>
<p>Отмена 2-х коммитов подряд:</p>
<pre><code>git revert HEAD~2
</code></pre>
<h2 id="модули">Модули</h2>
<p>Добавление модуля:</p>
<pre><code>git submodule add https://github.com/[MODULE] [MODULE]
</code></pre>
<p>Рекурсивное обновление всех модулей:</p>
<pre><code>git submodule update --recursive --remote --merge
</code></pre>
<p>Удаление модуля:</p>
<pre><code>git submodule deinit -f [MODULE]  \
  &amp;&amp; git rm -r --cached [MODULE]  \
  &amp;&amp; rm -rf .git/modules/[MODULE] \
  &amp;&amp; rm -rf [MODULE]
</code></pre>
<h2 id="изменение-адреса-репозитория">Изменение адреса репозитория</h2>
<p>Показать текущий адрес:</p>
<pre><code>git remote -v
</code></pre>
<p>Установить новый адрес:</p>
<pre><code>git remote set-url origin '[URL]'
</code></pre>]]></content:encoded><pubDate>Sat, 14 Aug 2021 15:52:38 +0000</pubDate><category>Linux</category><category>Git</category><category>Terminal</category><category>Статьи в разработке</category></item><item><title>Перезагрузка и выключение Linux</title><link>https://lib.onl/ru/posts/2021/05/86db7f3a-17ce-502b-b21d-337c3bba5d58/</link><dc:creator>Kitsune Solar</dc:creator><guid isPermaLink="true">https://lib.onl/ru/posts/2021/05/86db7f3a-17ce-502b-b21d-337c3bba5d58/</guid><description>Нередко приходится завершать работу системы через терминал, например, когда компьютер является удалённой рабочей станцией или сервером и вся работа происходит через терминал. В этой статье я постараюсь привести информацию о командах, позволяющих удалённо завершить работу системы.</description><content:encoded><![CDATA[<p>Нередко приходится завершать работу системы через терминал, например, когда компьютер является удалённой рабочей станцией или сервером и вся работа происходит через терминал. В этой статье я постараюсь привести информацию о командах, позволяющих удалённо завершить работу системы.</p>
<h2 id="halt--poweroff--reboot">halt / poweroff / reboot</h2>
<p>Старые команды по управлению питанием системы. Опции у этих команд одинаковые. Отдаются команды из под пользователя <strong>root</strong>. Команда <code>halt</code> приостанавливает все функции CPU, но сам ПК остаётся включённым. Команда <code>poweroff</code> отключает питание ПК, посылая сигнал по ACPI. Команда <code>reboot</code> даёт команду системе на перезагрузку.</p>







<div class="shortcode shortcode-alert">
  <div class="alert alert-success d-flex" role="alert">
    <div class="flex-shrink-0 align-self-center">
      <i class="fas fa-lightbulb fa-fw fa-2x"></i>
    </div>
    <div class="flex-grow-1 ms-3">
        <p>Команда <code>halt</code> в современных ОС полностью прекращает работу системы. На системах с <strong>systemd</strong> команда <code>halt</code> является устаревшей и представляет собой символьную ссылку на утилиту <code>systemctl</code>.</p>

    </div>
  </div>
</div>

<p>Предпочтительнее использовать команду <code>shutdown</code>, о которой я расскажу ниже.</p>
<h4 id="синтаксис">Синтаксис</h4>
<pre><code class="language-text">halt [OPTION]
poweroff [OPTION]
reboot [OPTION]
</code></pre>
<h4 id="некоторые-опции">Некоторые опции</h4>
<ul>
<li><code>-f</code> - принудительное выполнение команды.</li>
<li><code>-p</code> - сообщает команде <code>halt</code> действовать как <code>poweroff</code>.</li>
<li><code>-w</code> - не выполнять никакие действия, только записать в журнал <code>/var/log/wtmp</code> сообщение о завершении работы.</li>
</ul>
<h2 id="shutdown">shutdown</h2>
<p>За остановку работы ПК отвечает команда <code>shutdown</code>. Она поддерживает несколько опций, через которые задаётся определённое действие. К примеру:</p>
<ul>
<li><code>-r</code> - перезагрузка.</li>
<li><code>-h</code> - выключение.</li>
<li><code>-c</code> - отмена запланированных действий на перезагрузку или выключение.</li>
</ul>
<p>Для запланированной перезагрузки ПК через 1 минуту используется опция <code>-r</code>:</p>
<pre><code class="language-text">root@localhost ~ # shutdown -r
</code></pre>
<p>Команда <code>shutdown</code> поддерживает указание времени, когда ПК должен быть перезагружен или выключен. К примеру, перезагрузить через 5 минут:</p>
<pre><code class="language-text">root@localhost ~ # shutdown -r +5
</code></pre>
<p>Также можно указать конкретное время для перезагрузки. Например, перезагрузить ПК в 18:30:</p>
<pre><code class="language-text">root@localhost ~ # shutdown -r 18:30
</code></pre>
<p>Если перезагрузка или выключение уже запланированы, их можно отменить опцией <code>-c</code>:</p>
<pre><code class="language-text">root@localhost ~ # shutdown -c
</code></pre>
<p>Для немедленной перезагрузки ПК, вместо времени можно ввести <code>now</code>:</p>
<pre><code class="language-text">root@localhost ~ # shutdown -r now
</code></pre>
<p>Чтобы выключить ПК через 1 минуту, используется опция <code>-h</code>:</p>
<pre><code class="language-text">root@localhost ~ # shutdown -h
</code></pre>
<p>На этом всё, ничего сложного нет. 😄</p>]]></content:encoded><pubDate>Wed, 12 May 2021 14:20:47 +0000</pubDate><category>Terminal</category><category>Linux</category></item><item><title>Рекурсивное изменение прав доступа на файлы и директории</title><link>https://lib.onl/ru/posts/2021/05/4a3b0a31-0d3d-5a9b-8c07-7e3b4f80669e/</link><dc:creator>Kitsune Solar</dc:creator><guid isPermaLink="true">https://lib.onl/ru/posts/2021/05/4a3b0a31-0d3d-5a9b-8c07-7e3b4f80669e/</guid><description>Права доступа к файлам и директориям является неотъемлемой частью любой операционной системы. И в этой статье описаны возможности по рекурсивной настройке этих прав доступа.</description><content:encoded><![CDATA[<p>Права доступа к файлам и директориям является неотъемлемой частью любой операционной системы. И в этой статье описаны возможности по рекурсивной настройке этих прав доступа.</p>
<p>Изменение прав доступа осуществляется при помощи команды <code>chmod</code>, рекурсивное при добавлении опции <code>-R</code>:</p>
<pre><code class="language-text">chmod -R MODE DIR
</code></pre>
<ul>
<li><code>-R</code> - рекурсивный обход директорий и файлов.</li>
<li><code>MODE</code> - набор прав доступа для их установки.</li>
<li><code>DIR</code> - файл или директория, у которых необходимо установить определённые права доступа.</li>
</ul>
<p>В итоге, команда должна выглядеть так:</p>
<pre><code class="language-text">user@localhost ~ % chmod -R 755 /var/www/html
</code></pre>
<p>Но, стоит учитывать, что таким образом директории и файлы примут одинаковые права доступа. Чтобы избежать этого, можно воспользоваться командой <code>find</code>, которая отфильтрует директории и файлы друг от друга:</p>
<pre><code class="language-text">user@localhost ~ % find /var/www/html -type d -exec chmod 755 {} \;
user@localhost ~ % find /var/www/html -type f -exec chmod 644 {} \;
</code></pre>
<p>Команда <code>find</code> ищет директории (<code>-type d</code>) и файлы (<code>-type f</code>) и скармливает их команде <code>chmod</code>, а та, в свою очередь, уже расставляет права доступа. При использовании <code>-exec</code>, <code>chmod</code> выполняется для каждого найденного элемента поочерёдно. Можно оптимизировать и записать с использованием <code>xargs</code>:</p>
<pre><code class="language-text">user@localhost ~ % find /var/www/html -type d -print0 | xargs -0 chmod 755
user@localhost ~ % find /var/www/html -type f -print0 | xargs -0 chmod 644
</code></pre>
<p>При <code>xargs</code>, <code>chmod</code> выполняется сразу для нескольких записей одновременно, как сообщает <strong>Daniel Miessler</strong>:</p>



<div class="shortcode shortcode-quote">
  <figure>
    <blockquote class="blockquote">
        <p>This is where -exec breaks down and xargs shows its superiority. When you use -exec to do the work you run a separate instance of the called program for each element of input. So if find comes up with 10,000 results, you run exec 10,000 times. With xargs, you build up the input into bundles and run them through the command as few times as possible, which is often just once. When dealing with hundreds or thousands of elements this is a big win for xargs.</p>

    </blockquote>
      
        <figcaption class="blockquote-footer">
          <cite>
              
                <a href="https://danielmiessler.com/blog/linux-xargs-vs-exec/" target="_blank" rel="noopener nofollow">Daniel Miessler</a>
              
          </cite>
        </figcaption>
      
  </figure>
</div>

<p>Если необходимо запустить рекурсивное изменение прав доступа начиная с текущей директории, то <code>/var/www/html</code> необходимо поменять на точку:</p>
<pre><code class="language-text">user@localhost ~ % find . -type d -print0 | xargs -0 chmod 755
user@localhost ~ % find . -type f -print0 | xargs -0 chmod 644
</code></pre>]]></content:encoded><pubDate>Sun, 09 May 2021 17:15:26 +0000</pubDate><category>Terminal</category><category>Linux</category></item><item><title>Разнообразие команд ls*</title><link>https://lib.onl/ru/posts/2021/05/5ba03b8a-0505-5d80-bfad-f7a4d66f07b0/</link><dc:creator>Kitsune Solar</dc:creator><guid isPermaLink="true">https://lib.onl/ru/posts/2021/05/5ba03b8a-0505-5d80-bfad-f7a4d66f07b0/</guid><description>Команда ls и её разновидности позволяют вывести список директорий, файлов, устройств и различной другой информации. Я расскажу только о некоторых командах ls*, которые присутствуют в большинстве дистрибутивов Linux.</description><content:encoded><![CDATA[<p>Команда <code>ls</code> и её разновидности позволяют вывести список директорий, файлов, устройств и различной другой информации. Я расскажу только о некоторых командах <code>ls*</code>, которые присутствуют в большинстве дистрибутивов Linux.</p>
<p>Знаю, что есть <code>lsscsi</code>, <code>lsusb</code> и т.п., которые появляются в системе с установкой дополнительных пакетов, но я подобные команды рассматривать не стал. Хотя, по возможности, статью буду дополнять.</p>
<h2 id="ls">ls</h2>
<p>Команда позволяет вывести список директорий и файлов в текущем каталоге.</p>
<h4 id="некоторые-опции">Некоторые опции</h4>
<ul>
<li><code>-l</code> - использовать длинный формат отображения.</li>
<li><code>-S</code> - сортировать по размеру файла.</li>
<li><code>-t</code> - сортировать по времени модификации.</li>
<li><code>-a</code> - показать ВСЕ файлы, в том числе скрытые.</li>
<li><code>-R</code> - рекурсивное отображение директорий и файлов в них.</li>
<li><code>-h</code> - отображение размеров файлов в человеко-читаемом формате.</li>
<li><code>--hide='*.txt' -l</code> - игнорировать файлы с форматом <code>.txt</code>.</li>
</ul>
<h2 id="lscpu">lscpu</h2>
<p>Отображение доступной информации об установленном процессоре.</p>
<h4 id="некоторые-опции-1">Некоторые опции</h4>
<ul>
<li><code>-a</code> - показать ВСЕ CPU, как включённые, так и отключённые.</li>
</ul>
<h4 id="пример-использования">Пример использования</h4>
<pre><code class="language-text">user@localhost ~ % lscpu

Architecture:                    x86_64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
Address sizes:                   39 bits physical, 48 bits virtual
CPU(s):                          12
On-line CPU(s) list:             0-11
Thread(s) per core:              2
Core(s) per socket:              6
Socket(s):                       1
NUMA node(s):                    1
Vendor ID:                       GenuineIntel
CPU family:                      6
Model:                           165
Model name:                      Intel(R) Core(TM) i5-10400 CPU @ 2.90GHz
Stepping:                        5
CPU MHz:                         2900.000
CPU max MHz:                     4300.0000
CPU min MHz:                     800.0000
BogoMIPS:                        5799.77
L1d cache:                       192 KiB
L1i cache:                       192 KiB
L2 cache:                        1.5 MiB
L3 cache:                        12 MiB
</code></pre>
<h2 id="lspci">lspci</h2>
<p>Отображение информации по шине PCI и подключённых к ней устройствах.</p>
<h4 id="пример-использования-1">Пример использования</h4>
<pre><code class="language-text">user@localhost ~ % lspci

00:00.0 Host bridge: Intel Corporation Comet Lake-S 6c Host Bridge/DRAM Controller (rev 05)
00:01.0 PCI bridge: Intel Corporation 6th-10th Gen Core Processor PCIe Controller (x16) (rev 05)
00:14.0 USB controller: Intel Corporation Comet Lake USB 3.1 xHCI Host Controller
00:14.2 RAM memory: Intel Corporation Comet Lake PCH Shared SRAM
00:14.3 Network controller: Intel Corporation Comet Lake PCH CNVi WiFi
00:15.0 Serial bus controller [0c80]: Intel Corporation Comet Lake PCH Serial IO I2C Controller #0
00:15.1 Serial bus controller [0c80]: Intel Corporation Comet Lake PCH Serial IO I2C Controller #1
00:16.0 Communication controller: Intel Corporation Comet Lake HECI Controller
00:17.0 SATA controller: Intel Corporation Comet Lake SATA AHCI Controller
00:1d.0 PCI bridge: Intel Corporation Comet Lake PCI Express Root Port #9 (rev f0)
00:1f.0 ISA bridge: Intel Corporation Device 0684
00:1f.3 Audio device: Intel Corporation Comet Lake PCH cAVS
00:1f.4 SMBus: Intel Corporation Comet Lake PCH SMBus Controller
00:1f.5 Serial bus controller [0c80]: Intel Corporation Comet Lake PCH SPI Controller
00:1f.6 Ethernet controller: Intel Corporation Ethernet Connection (11) I219-V
01:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Baffin [Radeon RX 550 640SP / RX 560/560X] (rev cf)
01:00.1 Audio device: Advanced Micro Devices, Inc. [AMD/ATI] Baffin HDMI/DP Audio [Radeon RX 550 640SP / RX 560/560X]
</code></pre>
<h2 id="lsblk">lsblk</h2>
<p>Отображение информации по блочным устройствам.</p>
<h4 id="пример-использования-2">Пример использования</h4>
<pre><code class="language-text">user@localhost ~ % lsblk

NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    0 232.9G  0 disk
├─sda1   8:1    0   200M  0 part /boot/efi
├─sda2   8:2    0     4G  0 part /boot
├─sda3   8:3    0    64G  0 part /
├─sda4   8:4    0    32G  0 part [SWAP]
├─sda5   8:5    0    16G  0 part /tmp
└─sda6   8:6    0 116.7G  0 part /home
sdb      8:16   0 465.8G  0 disk
└─sdb1   8:17   0 465.8G  0 part /home/storage.01
sdc      8:32   1 119.5G  0 disk
└─sdc1   8:33   1 119.5G  0 part /run/media/user-0001/USB01
sdd      8:48   1  59.8G  0 disk
├─sdd1   8:49   1  59.7G  0 part /run/media/user-0001/Ventoy
└─sdd2   8:50   1    32M  0 part /run/media/user-0001/VTOYEFI
zram0  252:0    0     4G  0 disk [SWAP]
</code></pre>
<h2 id="lsmod">lsmod</h2>
<p>Отображение модулей ядра, загруженных в системе.</p>
<h4 id="пример-использования-3">Пример использования</h4>
<pre><code class="language-text">user@localhost ~ % lsmod

Module                  Size  Used by
exfat                  81920  1
f2fs                  700416  1
uas                    32768  0
usb_storage            81920  4 uas
snd_seq_dummy          16384  0
rfcomm                 90112  0
snd_hrtimer            16384  1
xt_CHECKSUM            16384  1
xt_MASQUERADE          20480  3
xt_conntrack           16384  1
ipt_REJECT             16384  2
nft_compat             20480  16
nf_nat_tftp            16384  0
nft_objref             16384  1
nf_conntrack_tftp      20480  3 nf_nat_tftp
nft_counter            16384  33
tun                    57344  1
bridge                294912  0
stp                    16384  1 bridge
llc                    16384  2 bridge,stp
</code></pre>]]></content:encoded><pubDate>Sun, 09 May 2021 13:44:05 +0000</pubDate><category>Terminal</category><category>Статьи в разработке</category><category>Linux</category></item><item><title>Первичная настройка UAIK</title><link>https://lib.onl/ru/posts/2020/06/59781965-afe7-5dd5-9798-d1c5ba6cdafd/</link><dc:creator>Kitsune Solar</dc:creator><guid isPermaLink="true">https://lib.onl/ru/posts/2020/06/59781965-afe7-5dd5-9798-d1c5ba6cdafd/</guid><description>После автоматической установки (Kickstart) при помощи UAIK , Fedora запустится в текстовом режиме. На этом этапе необходимо произвести первичную настройку операционной системы.</description><content:encoded><![CDATA[<p>После автоматической установки (Kickstart) при помощи 






    
    
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    


<a title="" href="https://uaik.github.io/" target="_blank" rel="noopener noreferrer nofollow">UAIK</a>
 , Fedora запустится в текстовом режиме. На этом этапе необходимо произвести первичную настройку операционной системы.</p>
<h4 id="включение-графического-режима">Включение графического режима</h4>
<pre><code class="language-bash">systemctl set-default graphical.target
</code></pre>
<h4 id="создание-пользователя">Создание пользователя</h4>
<pre><code class="language-bash"># Добавить пользователя.
useradd -mc &quot;User 0001&quot; user-0001

# Установить пароль для пользователя.
passwd user-0001
</code></pre>
<h4 id="отключение-пользователя">Отключение пользователя</h4>
<pre><code class="language-bash"># Отключить пользователя.
usermod -L user-0000
</code></pre>
<h4 id="перемещение-пользователя">Перемещение пользователя</h4>
<pre><code class="language-bash">usermod -md /new_home/user-0001 user-0001
</code></pre>
<h4 id="работа-с-диском">Работа с диском</h4>
<p>Чтобы создать на новом диске раздел, необходимо войти в программу <code>parted</code>:</p>
<pre><code class="language-bash">parted -a optimal /dev/sdb
</code></pre>
<p>Выполнить следующие команды:</p>
<pre><code class="language-bash">(parted) mklabel gpt
(parted) mkpart primary 0% 100%
(parted) quit
</code></pre>
<p>Создать файловую систему:</p>
<pre><code class="language-bash">mkfs.xfs /dev/sdb1
</code></pre>
<p>Настроить автоматическое монтирование раздела в <code>/etc/fstab</code>:</p>
<pre><code class="language-bash">/dev/sdb1 /home/storage xfs defaults 0 0
</code></pre>]]></content:encoded><pubDate>Tue, 02 Jun 2020 06:20:27 +0000</pubDate><category>Linux</category></item><item><title>Запись ISO на USB Flash Drive</title><link>https://lib.onl/ru/posts/2020/06/5d90ef6f-f05f-5462-b8a2-28dac0bb2f48/</link><dc:creator>Kitsune Solar</dc:creator><guid isPermaLink="true">https://lib.onl/ru/posts/2020/06/5d90ef6f-f05f-5462-b8a2-28dac0bb2f48/</guid><description>Команды для &amp;ldquo;правильной&amp;rdquo; записи ISO на USB Flash Drive.</description><content:encoded><![CDATA[<p>Команды для &ldquo;правильной&rdquo; записи ISO на USB Flash Drive.</p>
<ol>
<li>Определить USB-накопитель при помощи команды <code>fdisk -l</code>.</li>
<li>Отмонтировать ВСЕ разделы с USB-накопителя командой <code>umount /dev/sdX*</code>, где <code>X</code> - буква накопителя (например, <code>umount /dev/sdc*</code>).</li>
<li>Загрузить ISO на USB-накопитель:</li>
</ol>
<pre><code class="language-bash"># Отмонтировать и очистить USB-накопитель.
umount /dev/sdX* &amp;&amp; sgdisk -Z /dev/sdX

# Записать образ на USB-накопитель.
dd if=image.iso of=/dev/sdX bs=4M oflag=direct status=progress; sync

# Извлечь USB-накопитель.
eject /dev/sdX
</code></pre>]]></content:encoded><pubDate>Tue, 02 Jun 2020 06:20:24 +0000</pubDate><category>Linux</category></item></channel></rss>