{"data":[{"page":{"authors":["KitsuneSolar"],"categories":["Crypto"],"content":"GnuPG (GPG) это программа для шифрования информации и создания электронных цифровых подписей. Она создавалась в качестве свободной альтернативе несвободному PGP.\nСоздание ключа GPG предоставляет различные алгоритмы шифрования. Я предпочитаю алгоритм ECC, основанный на эллиптических кривых (Elliptic Curve Cryptography).\nДля создания ключей шифрования, нужно чтобы в системе была установлена утилита GPG. Для систем Debian и CentOS / Fedora этим занимается пакет gnupg, устанавливается командами:\n# CentOS 8 / Fedora dnf install gnupg # Debian apt install gnupg После того, как пакет установлен, можно начать создание ключа командой:\ngpg --expert --full-gen-key Команда вернёт следующий результат:\ngpg (GnuPG) 2.2.20; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (7) DSA (set your own capabilities) (8) RSA (set your own capabilities) (9) ECC and ECC (10) ECC (sign only) (11) ECC (set your own capabilities) (13) Existing key (14) Existing key from card Your selection? Здесь спрашивается, какой конкретно ключ мы хотим получить. Вводим 9. Получаем:\nPlease select which elliptic curve you want: (1) Curve 25519 (3) NIST P-256 (4) NIST P-384 (5) NIST P-521 (9) secp256k1 Your selection? А здесь уже предстоит выбрать алгоритм шифрования. Вводим 1. Получаем:\nPlease specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) На последнем шаге настройки ключа спрашивается время действия ключа. Обычно, личные ключи генерируются с безлимитным временем действия. Вводим 0 (этот пункт идёт по умолчанию).\nДальше будет пара-тройка вопросов по поводу имени владельца ключа, его адреса e-mail и с просьбой указать комментарий. Таким образом, создаётся пара ключей: закрытый и открытый. Открытый ключ можно публиковать на различных ресурсах с целью идентификации владельца и подтверждения его личности. Например, так работает верификация коммитов на GitLab’е и GitHub’е. Закрытый ключ должен всегда оставаться внутри системы.\nСписок ключей в системе Посмотреть установленные в системе ключи можно командой:\ngpg --list-keys --keyid-format LONG --with-fingerprint Здесь:\n--list-keys - показать список ключей. --keyid-format LONG - формат отображения каждого ключа в расширенном (LONG) формате. --with-fingerprint - вывести отпечаток. Для себя всегда добавляю эту опцию на всякий случай. Команда вернёт следующий результат:\npub ed25519/JTM4BAVLPI8F0XHR 2020-02-17 [SC] # Key: ID. Key fingerprint = XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX # Key: Fingerprint. uid [ultimate] John Doe \u0026lt;john.doe@example.com\u0026gt; # Key: INFO. sub cv25519/AI9NEDUOWRF016Y2 2020-02-17 [E] Здесь:\nJTM4BAVLPI8F0XHR - идентификатор ключа. Он потребуется для каких-либо действий с ключом (редактирование / удаление / и т.п.). [ultimate] - уровень доверия к ключу. John Doe - имя хозяина ключа. \u0026lt;john.doe@example.com\u0026gt; - почта хозяина ключа. ed25519 \u0026amp; cv25519 - алгоритмы шифрования. Экспорт и импорт ключа При создании открытого и закрытого ключей, необходимо экспортировать их для того, чтобы они хранились где-то независимо от системы, например, на какой-нибудь карте памяти или USB-флешке. Следующие две команды выполняют необходимые действия:\n# Export: PUBLIC. gpg --armor --output JohnDoe.public.asc --export JTM4BAVLPI8F0XHR # Export: PRIVATE. gpg --armor --output JohnDoe.private.asc --export-secret-keys JTM4BAVLPI8F0XHR Здесь:\n--armor - экспорт ключа в формате ASCII (текстовый формат). --output - имя файлы, в который будет экспортирован ключ. --export JTM4BAVLPI8F0XHR - экспорт открытого ключа с идентификатором JTM4BAVLPI8F0XHR. --export-secret-keys JTM4BAVLPI8F0XHR - экспорт закрытого ключа с идентификатором JTM4BAVLPI8F0XHR. С экспортом разобрались. Теперь по поводу импорта\u0026hellip; Импортировать также необходимо открытый и закрытый ключи. Следующие две команды выполняют необходимые действия:\n# Import: PUBLIC. gpg --import JohnDoe.public.asc # Import: PRIVATE. gpg --import JohnDoe.private.asc После импорта ключ приобретает стандартный уровень доверия. Для повышения или понижения уровня доверия, ключ необходимо отредактировать.\nРедактирование ключа Следующая команда позволяет отредактировать ключ:\ngpg --edit-key JTM4BAVLPI8F0XHR Здесь:\n--edit-key JTM4BAVLPI8F0XHR - редактирование ключа с идентификатором JTM4BAVLPI8F0XHR. Режим редактирования ключа представляет собой текстовый интерфейс, в который вручную вбиваются команды. Например, повысим уровень доверия к ключу до максимального (ultimate).\nВводим trust. Выбираем 5 (I trust ultimately). Вводим quit (выход). ","date":{"created":"2020-07-16T06:55:17Z","modified":"2020-07-16T06:55:17Z","published":"2020-07-16T06:55:17Z"},"description":"GnuPG (GPG) это программа для шифрования информации и создания электронных цифровых подписей. Она создавалась в качестве свободной альтернативе несвободному PGP.","images":["https://images.unsplash.com/photo-1572435555646-7ad9a149ad91"],"meta":{"fid":"366aceb7310a9619b6a1ef55b824d03d","licenses":null,"read_time":4,"sha1":"ba7f7d88f714b63403803e0c331126b74eca2a25","type":"posts","uuid":"7a204545-daa8-58ce-ba35-75e732e1bcc0","word_count":672},"name":"GnuPG: Создание и работа с ключами шифрования","tags":["gpg","gnupg"],"url":"https://lib.onl/ru/posts/2020/07/7a204545-daa8-58ce-ba35-75e732e1bcc0/"},"site":{"description":"Заметки на тему администрирования и разработки различных систем, приложений и серверов.","name":"Library Online","url":"https://lib.onl/"}}]}